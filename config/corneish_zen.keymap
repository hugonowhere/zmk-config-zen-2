#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        //zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            bindings = <&shifted>, <&kp>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <140>;
        };

        HT_Eaigu: HT_Eaigu {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_EAIGU";
            bindings = <&MC_Eaigu>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        HT_Egrave: HT_Egrave {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_EGRAVE";
            bindings = <&MC_Egrave>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <140>;
            hold-trigger-key-positions = <5>;
        };

        HT_Aaigu: HT_Aaigu {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_AAIGU";
            bindings = <&MC_Aaigu>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        HT_Ccedille: HT_Ccedille {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CCEDILLE";
            bindings = <&MC_Ccedille>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        HT_Uaigu: HT_Uaigu {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_UAIGU";
            bindings = <&MC_Uaigu>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        MORPH_BkSpcDel_Tap: BkSpcDelTap {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACEDELTAP";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MORPH_BkSpcDel_Hold: MORPH_BkSpcDel_Hold {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_BACKSPACEDEL_HOLD";
            bindings = <&kp RC(BACKSPACE)>, <&kp RC(DEL)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        HT_BkSpcDel: HT_BkSpcDel {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BackSpaceDel";
            bindings = <&MORPH_BkSpcDel_Hold>, <&MORPH_BkSpcDel_Tap>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        Alt_Tab: Alt_Tab {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
        };

        HT_Copy: HT_Copy {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_COPY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <14 15>;
        };

        HT_Paste: HT_Paste {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_PASTE";
            bindings = <&MC_Paste>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        TD_Paste: TD_Paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PASTE";
            #binding-cells = <0>;
            bindings = <&HT_Paste 0 LC(V)>, <&none>;

            tapping-term-ms = <150>;
        };

        HT_Dbl_Quot: HT_Dbl_Quot {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_DBL_QUOT";
            bindings = <&MC_Dbl_Quot>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        HT_Apost: HT_Apost {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_APOST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        HT_CapsLock: HT_CapsLock {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CAPSLOCK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        MC_Eaigu: MC_Eaigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_NUMBER_1) &kp LA(KP_NUMBER_4) &kp LA(KP_NUMBER_4)>;
            label = "MC_EAIGU";
        };

        MC_Egrave: MC_Egrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_NUMBER_2) &kp LA(KP_NUMBER_1) &kp LA(KP_NUMBER_2)>;
            label = "MC_EGRAVE";
        };

        MC_Ccedille: MC_Ccedille {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_NUMBER_1) &kp LA(KP_NUMBER_2) &kp LA(KP_NUMBER_8)>;
            label = "MC_CCEDILLE";
        };

        MC_Aaigu: MC_Aaigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_N0) &kp LA(KP_NUMBER_1) &kp LA(KP_NUMBER_9) &kp LA(KP_NUMBER_2)>;
            label = "MC_AAIGU";
        };

        MC_Uaigu: MC_Uaigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_NUMBER_2) &kp LA(KP_NUMBER_3) &kp LA(KP_NUMBER_5)>;
            label = "MC_UAIGU";
        };

        MC_Paste: MC_Paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V) &kp ENTER>;
            label = "MC_PASTE";
        };

        MC_PasteValue: MC_PasteValue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(V)) &kp V &kp RET>;
            label = "MC_PASTEVALUE";
        };

        MC_Dbl_Quot: MC_Dbl_Quot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N3 &kp N3 &kp LEFT>;
            label = "MC_DBL_QUOT";
        };
    };

    combos {
        compatible = "zmk,combos";

        undo {
            bindings = <&kp LC(W)>;
            key-positions = <2 3>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <3 4>;
        };

        printsc {
            bindings = <&ht LG(N3) LS(LG(S))>;
            key-positions = <4 5>;
        };

        selectall {
            bindings = <&kp LC(Q)>;
            key-positions = <14 15 16>;
        };

        Copy {
            bindings = <&HT_Copy LC(X) LC(C)>;
            key-positions = <14 15>;
        };

        Paste {
            bindings = <&TD_Paste>;
            key-positions = <15 16>;
        };

        Dbl_Quot {
            bindings = <&HT_Dbl_Quot 0 N3>;
            key-positions = <16 17>;
        };

        PreviousTab {
            bindings = <&kp LC(PAGE_UP)>;
            key-positions = <26 27>;
        };

        NextTab {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <27 28>;
        };

        underscore {
            bindings = <&kp N8>;
            key-positions = <28 29>;
        };

        EtCom {
            bindings = <&kp N1>;
            key-positions = <29 30>;
        };

        tiret {
            bindings = <&kp N6>;
            key-positions = <18 19>;
        };

        CtrlAltSuppr {
            bindings = <&kp LC(LA(DEL))>;
            key-positions = <0 11>;
        };

        Mute {
            bindings = <&kp K_MUTE>;
            key-positions = <10 11>;
        };

        TCLOCK {
            bindings = <&kp LA(LC(K))>;
            key-positions = <35 34>;
        };

        PreviousBT {
            bindings = <&bt BT_PRV>;
            key-positions = <26 27>;
            layers = <2>;
        };

        NextBT {
            bindings = <&bt BT_NXT>;
            key-positions = <27 28>;
            layers = <2>;
        };

        ClearBT {
            bindings = <&bt BT_CLR>;
            key-positions = <26 27 28>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "BEPO";
            bindings = <
&mt HASH AT_SIGN          &as B  &HT_Eaigu 0 N2  &as P         &as O      &HT_Egrave 0 N7              &kp CARET          &as V        &as D             &as L  &as J  &as W
&HT_Aaigu 0 N0            &as A  &as U           &as I         &as E      &HT_Apost LS(KP_MINUS) N4    &as C              &as T        &as S             &as R  &as N  &as M
&HT_Uaigu 0 SINGLE_QUOTE  &as X  &as Z           &as Y         &as COMMA  &kp B                        &HT_Ccedille 0 N9  &as Q        &as G             &as H  &as F  &as K
                                                 &lt 2 ESCAPE  &lt 1 TAB  &mt LCTRL ENTER              &lt 2 ENTER        &lt 1 SPACE  &HT_BkSpcDel 0 0
            >;
        };

        layer_1 {
            label = "NAVIGATION";
            bindings = <
&trans                        &trans        &trans        &trans         &trans     &trans    &kp PAGE_UP    &kp HOME       &kp UP      &kp END     &kp C_VOL_DN  &kp C_VOLUME_UP
&kp LEFT_GUI                  &trans        &Alt_Tab      &trans         &trans     &trans    &kp PAGE_DOWN  &kp LEFT       &kp DOWN    &kp RIGHT   &kp C_BRI_DN  &kp C_BRI_UP
&HT_CapsLock LEFT_SHIFT CAPS  &kp LEFT_ALT  &kp LA(LEFT)  &kp LA(RIGHT)  &trans     &trans    &kp LG(N4)     &kp LG(N5)     &kp LG(N6)  &kp LG(N7)  &kp LG(N8)    &kp LG(N9)
                                                          &kp LGUI       &lt 4 TAB  &trans    &kp LA(ENTER)  &kp LS(SPACE)  &trans
            >;
        };

        layer_2 {
            label = "NUMBER";
            bindings = <
&kp LG(N1)  &trans        &trans        &trans        &trans        &trans          &trans        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp DLLR     &kp KP_NUMLOCK
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp STAR      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp RA(E)    &kp PAUSE_BREAK
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LS(PLUS)  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LS(SQT)  &trans
                                        &kp LGUI      &lt 3 TAB     &trans          &trans        &kp DOT          &kp KP_N0
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
